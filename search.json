[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "brmj",
    "section": "",
    "text": "Bayesian Regression Models using Julia (like brms, but with Julia)."
  },
  {
    "objectID": "index.html#calling-bayesiansurvival.jl-from-python",
    "href": "index.html#calling-bayesiansurvival.jl-from-python",
    "title": "brmj",
    "section": "Calling BayesianSurvival.jl from python",
    "text": "Calling BayesianSurvival.jl from python\nProof of concept of interoperability between Julia modeling package and a thin python wrapper. Ideally, the python wrapper should be as thin as possible, but convert all returns from Julia function calls into python types (e.g. numpy arrays or pandas Dataframes).\n\nSetup\n\n\n[Importing brmj] Took 0.00 seconds\n\n\n\n\n[Initializing Julia environment] Took 0.02 seconds (\n           Will take A LOT longer the first time after python package installation.\n           This should \n            a) install a compatible Julia version,\n            b) install and precompile all required packages,\n            c) load all required packages.\n        )\n\n\n\n\n[Generating data] Took 0.01 seconds (will take slightly longer when first called in the current python session)\n\n\n\n\n\n\n\n\n\nage\nmale\nrate\ntrue_t\nt\nsurvived\nidx\n\n\n\n\n0\n61\nTrue\n0.082085\n1.143763\n1.143763\nFalse\n1\n\n\n1\n55\nTrue\n0.082085\n13.204365\n13.204365\nFalse\n2\n\n\n2\n66\nFalse\n0.049787\n11.805739\n11.805739\nFalse\n3\n\n\n3\n55\nFalse\n0.049787\n1.690516\n1.690516\nFalse\n4\n\n\n4\n46\nTrue\n0.082085\n20.832656\n20.000000\nTrue\n5\n\n\n5\n53\nFalse\n0.049787\n10.724720\n10.724720\nFalse\n6\n\n\n6\n46\nTrue\n0.082085\n4.416127\n4.416127\nFalse\n7\n\n\n7\n54\nTrue\n0.082085\n20.920089\n20.000000\nTrue\n8\n\n\n8\n48\nTrue\n0.082085\n8.959858\n8.959858\nFalse\n9\n\n\n9\n57\nFalse\n0.049787\n6.446218\n6.446218\nFalse\n10\n\n\n\n\n\n\n\n\n\nSampling from the posterior\nDisclaimer: I have not added a simple flag to make the sampling output less verbose. Skip to #plotting-generated-quantities.\n\n\n┌ Info: found initial stepsize\n└   ϵ = 6.1e-6\n┌ Info: Starting MCMC\n│   total_steps = 75\n└   tuning = \"stepsize\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 1.9e-5\n│   estimated_seconds_left = 0.0014\n└   ϵ = 6.1e-6\n┌ Info: Starting MCMC\n│   total_steps = 25\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00024\n│   estimated_seconds_left = 0.0058\n└   ϵ = 0.0395\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4349901492637821, 0.18678096010973505, 0.5545239876230268, 0.3916085905770331, 0.3408655203498329, 0.44067708976857706, 0.3551987338666184, 0.29658153827656547, 0.4244615720212198, 0.41719169719088983, 0.47317993433649275, 0.39765169651132976, 0.3845253506737901]\n┌ Info: Starting MCMC\n│   total_steps = 50\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00047\n│   estimated_seconds_left = 0.023\n└   ϵ = 0.043\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.5073086997972452, 0.17796699144583522, 0.6192123169050057, 0.6555884143811539, 0.6467948844706779, 0.4047889234639125, 0.5298800975560751, 0.5304676432478775, 0.7089223378675316, 0.511557068028947, 0.690053477617032, 0.7144109562338852, 0.4064958877753182]\n┌ Info: Starting MCMC\n│   total_steps = 100\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00012\n│   estimated_seconds_left = 0.012\n└   ϵ = 0.204\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.48834639309762035, 0.12843642445169604, 0.7294741291662659, 0.6950884446620578, 0.4632760466919985, 0.4605510396264569, 0.5239274784871957, 0.4963426788640893, 0.5485990415439441, 0.3505522361427205, 0.5336882442290699, 0.5937908716081944, 0.4138232150016302]\n┌ Info: Starting MCMC\n│   total_steps = 200\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00012\n│   estimated_seconds_left = 0.023\n└   ϵ = 0.247\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.00025\n│   estimated_seconds_left = 0.025\n└   ϵ = 0.192\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4832190195854669, 0.10155204653094194, 0.7451682275347185, 0.7081745882700069, 0.35090704084032187, 0.45350661220576555, 0.3999287786607539, 0.5041959326924434, 0.41262081130568573, 0.5038787186660818, 0.4295143956488231, 0.4646388736516078, 0.5653068633362475]\n┌ Info: Starting MCMC\n│   total_steps = 400\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.0001\n│   estimated_seconds_left = 0.042\n└   ϵ = 0.282\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.00074\n│   estimated_seconds_left = 0.22\n└   ϵ = 0.191\n┌ Info: MCMC progress\n│   step = 201\n│   seconds_per_step = 0.00024\n│   estimated_seconds_left = 0.048\n└   ϵ = 0.344\n┌ Info: MCMC progress\n│   step = 301\n│   seconds_per_step = 0.00023\n│   estimated_seconds_left = 0.022\n└   ϵ = 0.318\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4912048021746894, 0.07985739920721087, 0.7485790399261536, 0.7622494266979815, 0.4292127523480003, 0.39549001362923686, 0.43579236145269423, 0.38791963703542387, 0.38583522792979424, 0.43506030523480893, 0.3920426553546453, 0.4644787845475545, 0.41984453930658194]\n┌ Info: Starting MCMC\n│   total_steps = 50\n└   tuning = \"stepsize\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00014\n│   estimated_seconds_left = 0.0069\n└   ϵ = 0.25\n┌ Info: Starting MCMC\n└   total_steps = 1000\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00013\n└   estimated_seconds_left = 0.13\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.0002\n└   estimated_seconds_left = 0.18\n┌ Info: MCMC progress\n│   step = 201\n│   seconds_per_step = 0.00027\n└   estimated_seconds_left = 0.21\n┌ Info: MCMC progress\n│   step = 301\n│   seconds_per_step = 0.00026\n└   estimated_seconds_left = 0.18\n┌ Info: MCMC progress\n│   step = 401\n│   seconds_per_step = 0.00018\n└   estimated_seconds_left = 0.11\n┌ Info: MCMC progress\n│   step = 501\n│   seconds_per_step = 0.00027\n└   estimated_seconds_left = 0.14\n┌ Info: MCMC progress\n│   step = 601\n│   seconds_per_step = 0.00021\n└   estimated_seconds_left = 0.083\n┌ Info: MCMC progress\n│   step = 701\n│   seconds_per_step = 0.00024\n└   estimated_seconds_left = 0.071\n┌ Info: MCMC progress\n│   step = 801\n│   seconds_per_step = 0.00024\n└   estimated_seconds_left = 0.048\n┌ Info: MCMC progress\n│   step = 901\n│   seconds_per_step = 0.00048\n└   estimated_seconds_left = 0.047\n\n\n[Sampling from posterior] Took 15.54 seconds (\n           Will take A LOT longer when first called in the current python session - ~120s for me. \n           Julia does work equivalent to compiling Cmdstan + the model. \n           This time can very likely be reduced signifcantly by using Julia's precompilation mechanisms, but I don't know (yet) how to do it.\n        )\n\n\n\n\n┌ Info: found initial stepsize\n└   ϵ = 2.44e-5\n┌ Info: Starting MCMC\n│   total_steps = 75\n└   tuning = \"stepsize\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 7.6e-5\n│   estimated_seconds_left = 0.0056\n└   ϵ = 2.44e-5\n┌ Info: Starting MCMC\n│   total_steps = 25\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00025\n│   estimated_seconds_left = 0.006\n└   ϵ = 0.0451\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4976198660661657, 0.21820277136049265, 0.7243144908437517, 0.3278329050204647, 0.47612913781030075, 0.37735225926770233, 0.34172241992428554, 0.3361615217199377, 0.48778314798056815, 0.4985557695337386, 0.5022060239369374, 0.49494998768808035, 0.4308348757648336]\n┌ Info: Starting MCMC\n│   total_steps = 50\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00063\n│   estimated_seconds_left = 0.031\n└   ϵ = 0.039\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4816442362065488, 0.1858836953280511, 0.8461200462005398, 0.4208797176962983, 0.5765770801292291, 0.5503043654544628, 0.5058293896359004, 0.5029536717330623, 0.5479020608574342, 0.5508637318980968, 0.5192944632601004, 0.5538314973954823, 0.6137973062424859]\n┌ Info: Starting MCMC\n│   total_steps = 100\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00037\n│   estimated_seconds_left = 0.036\n└   ϵ = 0.171\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.6049398343563782, 0.11974192929292267, 0.9919185899359728, 0.5281208050345412, 0.4113992218740845, 0.4476660406226059, 0.4483403566893191, 0.4033592243814429, 0.4240007878577579, 0.4272244378305728, 0.37815074147780886, 0.41179133432786286, 0.6098317488142546]\n┌ Info: Starting MCMC\n│   total_steps = 200\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00011\n│   estimated_seconds_left = 0.023\n└   ϵ = 0.251\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.00023\n│   estimated_seconds_left = 0.023\n└   ϵ = 0.384\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.488511783130716, 0.09489722595767133, 0.7589800357607599, 0.5916686928287929, 0.3922946165128542, 0.3739835712859981, 0.449183810354827, 0.3950321165160429, 0.4625220226837979, 0.4388540323282407, 0.4395102906613293, 0.48075381355694813, 0.4615471062339811]\n┌ Info: Starting MCMC\n│   total_steps = 400\n└   tuning = \"stepsize and LinearAlgebra.Diagonal metric\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00012\n│   estimated_seconds_left = 0.046\n└   ϵ = 0.282\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.00021\n│   estimated_seconds_left = 0.061\n└   ϵ = 0.223\n┌ Info: MCMC progress\n│   step = 201\n│   seconds_per_step = 0.00018\n│   estimated_seconds_left = 0.037\n└   ϵ = 0.3\n┌ Info: MCMC progress\n│   step = 301\n│   seconds_per_step = 0.00037\n│   estimated_seconds_left = 0.037\n└   ϵ = 0.14\n┌ Info: adaptation finished\n└   adapted_kinetic_energy = Gaussian kinetic energy (Diagonal), √diag(M⁻¹): [0.4771113772240583, 0.07752736115927328, 0.7373688885790052, 0.7482851689881745, 0.45370974215156734, 0.5083571223710217, 0.4279241282856028, 0.4502831626892461, 0.45380692944509704, 0.41526287805606493, 0.4641738408059392, 0.5316092816927311, 0.5316003487173214]\n┌ Info: Starting MCMC\n│   total_steps = 50\n└   tuning = \"stepsize\"\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 6.0e-5\n│   estimated_seconds_left = 0.003\n└   ϵ = 0.337\n┌ Info: Starting MCMC\n└   total_steps = 1000\n┌ Info: MCMC progress\n│   step = 1\n│   seconds_per_step = 0.00024\n└   estimated_seconds_left = 0.24\n┌ Info: MCMC progress\n│   step = 101\n│   seconds_per_step = 0.00019\n└   estimated_seconds_left = 0.17\n┌ Info: MCMC progress\n│   step = 201\n│   seconds_per_step = 0.00021\n└   estimated_seconds_left = 0.17\n┌ Info: MCMC progress\n│   step = 301\n│   seconds_per_step = 0.00025\n└   estimated_seconds_left = 0.18\n┌ Info: MCMC progress\n│   step = 401\n│   seconds_per_step = 0.00013\n└   estimated_seconds_left = 0.077\n┌ Info: MCMC progress\n│   step = 501\n│   seconds_per_step = 0.0002\n└   estimated_seconds_left = 0.1\n┌ Info: MCMC progress\n│   step = 601\n│   seconds_per_step = 0.00022\n└   estimated_seconds_left = 0.088\n┌ Info: MCMC progress\n│   step = 701\n│   seconds_per_step = 0.00018\n└   estimated_seconds_left = 0.054\n┌ Info: MCMC progress\n│   step = 801\n│   seconds_per_step = 0.0002\n└   estimated_seconds_left = 0.041\n┌ Info: MCMC progress\n│   step = 901\n│   seconds_per_step = 0.00021\n└   estimated_seconds_left = 0.02\n\n\n[Sampling from posterior] Took 0.49 seconds (should be much quicker the second time around - &lt; 1s for me)\n\n\n\n\nPlotting generated quantities\n\n\n[Plotting using Julia] Took 0.08 seconds (Looks like this works out of the box.)\n\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[Plotting using Python] Took 0.19 seconds"
  }
]